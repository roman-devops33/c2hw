---
name: Build
on:
  push:
    branches: [main, ci/github]
  pull_request:
permissions:
  contents: read
env:
  TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_cloudflare_api_token }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_cloudflare_zone_id }}
  TF_VAR_ya_cloud_init: ${{ vars.TF_VAR_ya_cloud_init }}
  TF_VAR_folder_id: ${{ secrets.TF_VAR_folder_id }}
  TF_VAR_cloud_id: ${{ vars.TF_VAR_cloud_id }}
  TF_VAR_yakey: ${{ vars.TF_VAR_yakey }}
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

    # Create files
      - name: create secure-files
        run: |
          mkdir ../.secure_files
          echo ${{ secrets.SECURE_FILES_BACKEND }} > ../.secure_files/backend.tfvars
          echo ${{ secrets.SECURE_FILES_TFVARS }} > ../.secure_files/terraform.tfvars
          echo ${{ secrets.SECURE_FILES_CLOUD_INIT }} > ../.secure_files/ya-cloud-init.yml
          echo ${{ secrets.SECURE_FILES_YA_KEYFILE }} > ../.secure_files/yackey.json

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config='../.secure_files/backend.tfvars'

    # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          terraform fmt -check

    # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          terraform plan \
          -input=false \
          -var-file='../.secure_files/terraform.tfvars'
          echo "### HOSTS :rocket:" >> $GITHUB_STEP_SUMMARY

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref_name == 'main'
        run: |
          terraform apply \
          -auto-approve \
          -input=false \
          -var-file='../.secure_files/terraform.tfvars'

      - name: Save inventory
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v3
        with:
          name: ansible-inventory
          path: hosts

  # https://faun.pub/how-to-run-an-ansible-playbook-using-github-action-42430dec944
  # https://www.dvlv.co.uk/how-we-use-github-actions-and-ansible-to-automate-flask-postgres-applications.html
  ansible:
    name: Ansible
    needs: terraform
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ansible
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies Including Ansible
        run: |
          python3 -m venv ansible
          source ansible/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Install SSH key
        run: |
          mkdir ~/.ssh
          echo "${{secrets.ANSIBLE_SSH_KEY}}" > ~/.ssh/ansible
          chmod 600 ~/.ssh/ansible

      - name: Download inventory
        if: github.ref_name == 'main'
        uses: actions/download-artifact@v3
        with:
          name: ansible-inventory

      - name: Run playbook
        if: github.ref_name == 'main'
        run: |
          cat hosts >> $GITHUB_STEP_SUMMARY
          ansible-playbook -i ./hosts main.yml
